# Default values for office service
replicaCount: 1

# Server component (backoffice-server)
server:
  image:
    registry: rg.fr-par.scw.cloud
    repository: ejaw/backoffice-server
    tag: "2.5.54"
    pullPolicy: IfNotPresent

# Client component (backoffice-client)
client:
  enabled: true
  image:
    registry: rg.fr-par.scw.cloud
    repository: ejaw/backoffice-client
    tag: "2.9.57"
    pullPolicy: IfNotPresent

imagePullSecrets:
  - name: docker-registry-credentials

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  sidecar.istio.io/inject: "false"  # Minimal Istio
  prometheus.io/scrape: "true"
  prometheus.io/port: "7410"

podSecurityContext:
  runAsNonRoot: false
  runAsUser: 0
  fsGroup: 0

securityContext:
  privileged: true              # ADD THIS LINE (most important!)
  allowPrivilegeEscalation: true  # Changed from: false
  runAsUser: 0                  # ADD THIS LINE
  runAsNonRoot: false          # ADD THIS LINE
  capabilities:
    add:                       # Changed from: drop
    - ALL                      # Changed from: - ALL (under drop)
  readOnlyRootFilesystem: false  # Keep as is

service:
  type: ClusterIP
  grpcPort: 7400
  httpPort: 7410
  clientPort: 80
  annotations: {}

resources:
  server:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  client:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70

nodeSelector:
  workload: core-services

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - office
        topologyKey: kubernetes.io/hostname

# Enable secrets creation
secretsEnabled: true

# Application Configuration
config:
  env: production
  logLevel: info
  frontURL: https://localhost #https://admin.rgs.yourdomain.com
  sendEmail: business@ejaw.net #admin@yourdomain.com 
  resetPasswordURL: https://localhost #https://admin.rgs.yourdomain.com/reset-password
  
  client:
    logoUrl: https://s3.fr-par.scw.cloud/heronbyte.cdn/backoffice-logo/ninjagaming-logo.png
    environmentName: "Ninjagaming RGS Production"
  
  server:
    host: "0.0.0.0"
    port: 7410
    readTimeout: "300s"
    writeTimeout: "300s"
  
  rpc:
    host: "0.0.0.0"
    port: 7400
    maxProcessingTime: 300000
  
  # Service dependencies - Updated to use Kubernetes service discovery
  history:
    host: history-service-server.rgs-core.svc.cluster.local
    port: 7200
    isSecure: false
  
  overlord:
    host: overlord-service-server.rgs-core.svc.cluster.local
    port: 7500
    isSecure: false
  
  exchange:
    host: exchange-service-server.rgs-core.svc.cluster.local
    port: 7100
    isSecure: false

# Database configuration
database:
  host: 77.93.172.81  # External database - keep as is for now
  port: 5432
  name: office
  user: office
  password: 2ee4befb-015e-41e9-be59-8a0d58744c38  # Move to secret in production
  connectionTimeout: "300s"
  compression: "zlib"
  pingInterval: "30s"
  minConnections: 100
  maxConnections: 200

# Redis configuration
redis:
  host: redis-master.rgs-infrastructure.svc.cluster.local
  port: 6379
  password: ""  # Move to secret in production
  basePrefix: svc.backoffice

# RabbitMQ configuration
rabbitmq:
  host: rabbitmq.rgs-infrastructure.svc.cluster.local
  port: 5672
  username: user
  password: wuT9aphi  # Move to secret in production

# Mailgun configuration
mailgun:
  domain: helloworld.example
  apiKey: no-key  # Replace with actual API key in production

# JWT configuration
jwt:
  headerName: "X-Auth"
  queryName: "token"
  headerScheme: ""
  fingerprint: bb5f803a-b8c8-4234-8eef-01799320784d  # Generate new one for production
  accessTokenLifetime: "24h"
  refreshTokenLifetime: "720h"
  issuer: "svc.backoffice"

# TOTP configuration
totp:
  issuer: backoffice.rgs-production
  secretSize: 90
  algorithm: 2
  period: 30
  digits: 6

# Tracer configuration
tracer:
  disabled: true  # Enable in production with proper Jaeger endpoint
  url: http://jaeger-collector.monitoring.svc.cluster.local:14268/api/traces
  serviceName: backoffice

# File configuration
file:
  ttl: "1h"

# Lobby configuration
lobby:
  lobbyBaseURL: "games.ninjagaming.com"  # Update with actual domain

# External secrets (if using)
externalSecret:
  enabled: false
  backend: kubernetes  # or vault, aws-secrets-manager
  
# Startup probe - handles slow initial startup
startupProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 20  # 10s + (5s * 20) = 110s max startup time

# Liveness probe - aggressive, kills truly broken pods
livenessProbe:
  httpGet:
    path: /health
    port: http
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3  # 3 failures = 30s before restart

# Readiness probe - conservative, controls traffic flow
readinessProbe:
  httpGet:
    path: /health
    port: http
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 2
  successThreshold: 2  # Must succeed twice before receiving traffic

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: false
  policyTypes:
  - Ingress
  - Egress