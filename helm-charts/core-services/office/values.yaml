# Default values for office service
replicaCount: 2

# Server component (backoffice-server)
server:
  image:
    registry: rg.fr-par.scw.cloud
    repository: ejaw/backoffice-server
    tag: "2.5.54"
    pullPolicy: IfNotPresent

# Client component (backoffice-client)
client:
  enabled: true
  image:
    registry: rg.fr-par.scw.cloud
    repository: ejaw/backoffice-client
    tag: "2.9.57"
    pullPolicy: IfNotPresent

imagePullSecrets:
  - name: docker-registry-credentials

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  sidecar.istio.io/inject: "false"  # Minimal Istio
  prometheus.io/scrape: "true"
  prometheus.io/port: "7410"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false  # Node.js apps often need writable /tmp
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  grpcPort: 7400
  httpPort: 7410
  clientPort: 80
  annotations: {}

resources:
  server:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  client:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70

nodeSelector: {}
tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - office
        topologyKey: kubernetes.io/hostname

# Application Configuration
config:
  env: production
  logLevel: info
  frontURL: https://localhost #https://admin.rgs.yourdomain.com
  sendEmail: business@ejaw.net #admin@yourdomain.com 
  resetPasswordURL: https://localhost #https://admin.rgs.yourdomain.com/reset-password
  
  client:
    logoUrl: https://s3.fr-par.scw.cloud/heronbyte.cdn/backoffice-logo/ninjagaming-logo.png
    environmentName: "RGS Production"
  
  server:
    host: "0.0.0.0"
    port: 7410
    readTimeout: "300s"
    writeTimeout: "300s"
  
  rpc:
    host: "0.0.0.0"
    port: 7400
    maxProcessingTime: 300000
  
  # Service dependencies
  history:
    host: history.rgs-core.svc.cluster.local
    port: 7210
    isSecure: false
  
  overlord:
    host: overlord.rgs-core.svc.cluster.local
    port: 7510
    isSecure: false
  
  exchange:
    host: exchange.rgs-core.svc.cluster.local
    port: 7110
    isSecure: false

# Database configuration
database:
  host: postgresql.rgs-infrastructure.svc.cluster.local
  port: 5432
  name: office
  connectionTimeout: "300s"
  compression: "zlib"
  pingInterval: "30s"
  minConnections: 10
  maxConnections: 50

# Redis configuration
redis:
  host: redis-master.rgs-infrastructure.svc.cluster.local
  port: 6379
  basePrefix: svc.backoffice

# RabbitMQ configuration
rabbitmq:
  host: rabbitmq.rgs-infrastructure.svc.cluster.local
  port: 5672

# External secrets (if using)
externalSecret:
  enabled: false
  backend: kubernetes  # or vault, aws-secrets-manager
  
# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: false
  policyTypes:
  - Ingress
  - Egress
