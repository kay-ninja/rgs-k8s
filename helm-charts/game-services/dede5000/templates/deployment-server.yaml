apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-server
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
    component: server
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: server
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        component: server
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: server
        image: "{{ .Values.server.image.registry }}/{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}"
        imagePullPolicy: {{ .Values.server.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.server.port }}
          protocol: TCP
        volumeMounts:
        - name: server-config
          mountPath: /app/configs/config.yaml
          subPath: config.yaml
          readOnly: true
        - name: server-config
          mountPath: /app/configs/dede5000.yaml
          subPath: dede5000.yaml
          readOnly: true
        resources:
          {{- toYaml .Values.resources.server | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: server-config
        configMap:
          name: {{ .Release.Name }}-server-config
