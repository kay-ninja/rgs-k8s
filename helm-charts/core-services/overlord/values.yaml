# Default values for overlord service
replicaCount: 2

image:
  repository: registry.ejaw.net/rgs/backend/core/overlord
  tag: "1.4.285"
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: docker-registry-credentials

nameOverride: ""
fullnameOverride: ""

env:
  goMaxProcs: 6

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  sidecar.istio.io/inject: "false"
  prometheus.io/scrape: "true"
  prometheus.io/port: "7510"

podSecurityContext:
  runAsNonRoot: false
  runAsUser: 0
  fsGroup: 0

securityContext:
  privileged: true
  allowPrivilegeEscalation: true
  runAsUser: 0
  runAsNonRoot: false
  capabilities:
    add:
    - ALL
  readOnlyRootFilesystem: false

service:
  type: ClusterIP
  grpcPort: 7500
  httpPort: 7510
  annotations: {}

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 300m
    memory: 300Mi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70

nodeSelector: {}
tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - overlord
        topologyKey: kubernetes.io/hostname

# Application Configuration
config:
  history:
    host: history-service-server.rgs-core.svc.cluster.local
    port: 7200
    isSecure: false

  pfr:
    host: pfr-service.rgs-core.svc.cluster.local  # Update based on actual service name
    port: 7600
    isSecure: false

# Database configuration
database:
  host: 77.93.172.148  # External database
  port: 5432
  name: overlord
  user: overlord
  password: 5ad7a882-a84e-42cd-9f76-6ac0410e38cd
  connectionTimeout: "30s"
  compression: zlib
  pingInterval: "30s"
  minConnections: 10
  maxConnections: 20

# Redis configuration
redis:
  host: redis-master.rgs-infrastructure.svc.cluster.local
  port: 6379
  password: ""  # No auth as per your setup
  basePrefix: svc.overlord

# RabbitMQ configuration
rabbitmq:
  host: rabbitmq.rgs-infrastructure.svc.cluster.local
  port: 5672
  username: user
  password: 4rRFjkrd4IP0oy4KW5c9h3ND4OZxO90/FEr6Uz9iRgw=  # Plain text password

# Integrators configuration
integrators:
  ninjagaming:
    apiSecret: AlOGYrOunT
    baseUrl: https://645e6271-b9d0-41f9-b836-7b6ba7bb9891.ninjaops.tech/api/sessions/rgs1
    withLogs: true
  direct:
    apiKey: testtest11
    apiSecret: superSecret
    url: https://example.com
    withLogs: true

# Providers configuration
providers:
  heronbyte:
    withLogs: true

# Tracer configuration
tracer:
  disabled: true
  url: http://jaeger-collector.monitoring.svc.cluster.local:14268/api/traces
  serviceName: overlord

# Logger configuration
logger:
  logLevel: error

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 5

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 5

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1