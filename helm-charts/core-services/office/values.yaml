# Default values for office service
# Path: helm-charts/core-services/office/values.yaml

replicaCount: 3

image:
  registry: rg.fr-par.scw.cloud
  repository: ejaw/backoffice-server
  tag: "2.5.54"
  pullPolicy: IfNotPresent

imageClient:
  registry: rg.fr-par.scw.cloud
  repository: ejaw/backoffice-client
  tag: "2.9.57"
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: regcred

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

global:
  imagePullSecrets:
    - docker-registry-credentials

podAnnotations:
  sidecar.istio.io/inject: "false"
  prometheus.io/scrape: "true"
  prometheus.io/port: "7410"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  grpcPort: 7400
  httpPort: 7410
  clientPort: 80
  annotations: {}

ingress:
  enabled: false # Using Istio Gateway instead

resources:
  server:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  client:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - office
        topologyKey: kubernetes.io/hostname

# Application Configuration
config:
  env: production
  logLevel: info
  frontURL: https://localhost #https://admin.rgs.yourdomain.com
  sendEmail: business@ejaw.net #admin@yourdomain.com 
  resetPasswordURL: https://localhost #https://admin.rgs.yourdomain.com/reset-password
  
  client:
    logoUrl: https://s3.fr-par.scw.cloud/heronbyte.cdn/backoffice-logo/ninjagaming-logo.png
    environmentName: "RGS Production K8s"
  
  server:
    host: "0.0.0.0"
    port: 7410
    readTimeout: "300s"
    writeTimeout: "300s"
  
  rpc:
    host: "0.0.0.0"
    port: 7400
    maxProcessingTime: 300000ms
  
  history:
    host: history
    port: 7200
    isSecure: true # mTLS in Istio
  
  overlord:
    host: overlord
    port: 7500
    isSecure: true
  
  exchange:
    host: exchange
    port: 7100
    isSecure: true

# Database configuration (using secrets)
database:
  host: postgresql.rgs-infrastructure.svc.cluster.local
  port: 5432
  name: office
  connectionTimeout: "300s"
  compression: "zlib"
  pingInterval: "30s"
  minConnections: 10  # Reduced for K8s
  maxConnections: 50  # Reduced for K8s

# Redis configuration
redis:
  host: redis.rgs-infrastructure.svc.cluster.local
  port: 6379
  basePrefix: svc.backoffice

# RabbitMQ configuration
queue:
  host: rabbitmq.rgs-infrastructure.svc.cluster.local
  port: 5672

# Secrets (will be created separately)
secrets:
  database:
    user: office
    password: "" # Will be injected from sealed-secret
  redis:
    password: "" # Will be injected from sealed-secret
  rabbitmq:
    username: user
    password: "" # Will be injected from sealed-secret
  jwt:
    fingerprint: "" # Will be injected from sealed-secret
  mailgun:
    apiKey: "" # Will be injected from sealed-secret

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: rgs-core
    - namespaceSelector:
        matchLabels:
          name: rgs-games
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: rgs-infrastructure
    - namespaceSelector:
        matchLabels:
          name: rgs-core

# Monitoring
monitoring:
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
  
  dashboards:
    enabled: true
    labels:
      grafana_dashboard: "1"

# Backup configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: 30

# Feature flags
features:
  tracing: true
  metrics: true
  profiling: false
